pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: StorageVariables # Includes defectDojoUrl, defectDojoToken, azureStorageConnectionString, etc.
  - name: SONARQUBE_SERVER
    value: 'http://4.240.124.40:9000/'
stages:
  # SonarQube Analysis Stage
  - stage: SonarQubeAnalysis
    displayName: 'SonarQube Analysis'
    jobs:
      - job: Analyze
        displayName: 'Run SonarQube Analysis'
        steps:
          - checkout: self
            fetchDepth: 0
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
          - script: |
              wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.1.0.4477-linux.zip
              unzip sonar-scanner-cli-6.1.0.4477-linux.zip
              export PATH=$(pwd)/sonar-scanner-*/bin:$PATH
          - task: SonarQubePrepare@6
            inputs:
              SonarQube: 'sonarqube'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'python-test'
              cliSources: '.'
              extraProperties: |
                sonar.projectVersion=1.0
                sonar.host.url=$(SONARQUBE_SERVER)
                sonar.login=$(SONARQUBE_TOKEN)
                sonar.python.version=3.7,3.8,3.9
          - task: SonarQubeAnalyze@6
          - task: SonarQubePublish@6
            inputs:
              pollingTimeoutSec: '300'
          - script: |
              curl -X POST -H "Authorization: Token $(defectDojoToken)" \
                   -F 'scan_type=SonarQube Scan' \
                   -F "file=@$(Build.ArtifactStagingDirectory)/sonarqube-report.json" \
                   -F "engagement=$(engagementIdSonarQube)" \
                   -F 'active=true' \
                   -F 'verified=true' \
                   "$(defectDojoUrl)"
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'az-storageaccount-access-test'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az storage blob upload \
                  --account-name viswajithcloudshellsa \
                  --container-name test \
                  --file $(Build.ArtifactStagingDirectory)/sonarqube-report.json \
                  --name sonarqube-report.json \
                  --overwrite \
                  --connection-string $(AZURE_STORAGE_CONNECTION_STRING)

  # Trivy Repository Scan Stage
  - stage: TrivyRepoScan
    displayName: 'Trivy Repository Scan'
    jobs:
      - job: RepoScan
        displayName: 'Scan Repository with Trivy'
        steps:
          - script: |
              sudo apt-get install -y wget
              wget https://github.com/aquasecurity/trivy/releases/download/v0.33.0/trivy_0.33.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.33.0_Linux-64bit.deb
          - script: |
              trivy fs --exit-code 0 --severity CRITICAL,HIGH,LOW --format json --output $(Build.ArtifactStagingDirectory)/trivy-repo-sbom.json .
          - script: |
              curl -X POST -H "Authorization: Token $(defectDojoToken)" \
                   -F 'scan_type=Trivy Scan' \
                   -F "file=@$(Build.ArtifactStagingDirectory)/trivy-repo-sbom.json" \
                   -F "engagement=$(engagementIdTrivyRepo)" \
                   -F 'active=true' \
                   -F 'verified=true' \
                   "$(defectDojoUrl)"
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'az-storageaccount-access-test'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az storage blob upload \
                  --account-name viswajithcloudshellsa \
                  --container-name test \
                  --file $(Build.ArtifactStagingDirectory)/trivy-repo-sbom.json \
                  --name trivy-repo-sbom.json \
                  --overwrite \
                  --connection-string $(AZURE_STORAGE_CONNECTION_STRING)

  # OWASP Dependency Check Stage
  - stage: OWASPDependencyCheck
    displayName: 'OWASP Dependency Check'
    dependsOn: TrivyRepoScan
    jobs:
      - job: DependencyCheck
        displayName: 'Run OWASP Dependency Check'
        steps:
          - script: |
              wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.4/dependency-check-10.0.4-release.zip
              unzip dependency-check-10.0.4-release.zip -d dependency-check
              chmod +x dependency-check/bin/dependency-check.sh
              export PATH=$(pwd)/dependency-check/bin:$PATH
              echo "nvd.api.key=$(NVD_API_KEY)" > dependency-check.properties
          - script: |
              dependency-check/bin/dependency-check.sh \
              --project "pygoat-python" \
              --out "$(Build.SourcesDirectory)/dependency-check-report" \
              --scan "$(Build.SourcesDirectory)" \
              --format JSON
          - script: |
              curl -X POST -H "Authorization: Token $(defectDojoToken)" \
                   -F 'scan_type=Dependency Check Scan' \
                   -F "file=@$(Build.SourcesDirectory)/dependency-check-report/dependency-check-report.json" \
                   -F "engagement=$(engagementIdDependencyCheck)" \
                   -F 'active=true' \
                   -F 'verified=true' \
                   "$(defectDojoUrl)"
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'az-storageaccount-access-test'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az storage blob upload \
                  --account-name viswajithcloudshellsa \
                  --container-name test \
                  --file $(Build.SourcesDirectory)/dependency-check-report/dependency-check-report.json \
                  --name dependency-check-report.json \
                  --overwrite \
                  --connection-string $(AZURE_STORAGE_CONNECTION_STRING)

  # Trivy Image Scan Stage
  - stage: TrivyImageScan
    displayName: 'Trivy Image Scan'
    dependsOn: OWASPDependencyCheck
    jobs:
      - job: ImageScan
        displayName: 'Scan Container Image with Trivy'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(containerRegistry)'
              command: 'login'
          - script: |
              sudo apt-get update
              sudo apt-get install -y wget
              wget https://github.com/aquasecurity/trivy/releases/download/v0.33.0/trivy_0.33.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.33.0_Linux-64bit.deb
          - script: |
              trivy image --exit-code 0 --severity CRITICAL,HIGH,LOW --format json --output $(Build.ArtifactStagingDirectory)/image-sbom.json $(containerRegistry)/$(imageName):$(Build.BuildId)
          - script: |
              curl -X POST -H "Authorization: Token $(defectDojoToken)" \
                   -F 'scan_type=Trivy Image Scan' \
                   -F "file=@$(Build.ArtifactStagingDirectory)/image-sbom.json" \
                   -F "engagement=$(engagementIdTrivyImage)" \
                   -F 'active=true' \
                   -F 'verified=true' \
                   "$(defectDojoUrl)"
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'az-storageaccount-access-test'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az storage blob upload \
                  --account-name viswajithcloudshellsa \
                  --container-name test \
                  --file $(Build.ArtifactStagingDirectory)/image-sbom.json \
                  --name image-sbom.json \
                  --overwrite \
                  --connection-string $(AZURE_STORAGE_CONNECTION_STRING)
